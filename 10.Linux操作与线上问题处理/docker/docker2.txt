	docker核心角色：

Docker镜像(Images)：是用于创建 Docker 容器的模板。
Docker容器(Container)：是镜像运行时的实体，是独立运行的一个或一组应用。
Docker仓库(Registry)：用来保存镜像，可以理解为代码控制中的代码仓库。
Docker客户端(Client)：Docker 客户端通过命令行或者其他工具使用 Docker SDK (https://docs.docker.com/develop/sdk/) 与 Docker 的守护进程通信。
Docker主机(Host)：用于执行 Docker 守护进程和容器的一个物理或虚拟的机器。
DockerMachine：Docker Machine是一个简化Docker安装的命令行工具，通过一个简单的命令行即可在相应的平台上安装Docker，比如VirtualBox、 Digital Ocean、Microsoft Azure。

Docker Hub(https://hub.docker.com) 提供了庞大的镜像集合供使用。一个 Docker Registry 中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。我们可以通过 <仓库名>:<标签> 的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 latest 作为默认标签。
====================================================================================================
镜像：

1. 搜索镜像：docker search <REPOSITORY>
	NAME:镜像的仓库源
	DESCRIPTION:镜像描述
	OFFICIAL:是否docker官方发布
	STARS:点赞数
	AUTOMATED:自动构建

2. 下载镜像：docker pull <REPOSITORY>

3. *查看镜像列表：docker images [<REPOSITORY>]
	REPOSITORY:镜像的仓库源
	TAG:镜像的标签
	IMAGE ID:镜像的ID
	CREATED:镜像创建时间
	SIZE:镜像大小
	（一个镜像：REPOSITORY:TAG。REPOSITORY:TAG(1:n),REPOSITORY:IMAGE ID(1:n),IMAGE ID:TAG(1:n)）

4. *构建镜像：docker build  -t <REPOSITORY> .
	-t：指定要创建的目标镜像名
	.：Dockerfile文件所在目录，可以指定Dockerfile的绝对路径
	
5. *设置镜像标签：docker tag <IMAGE_ID>/<REPOSITORY:TAG> <REPOSITORY:TAG>

6. *删除镜像：docker rmi <REPOSITORY>
	
7. Dockerfile：
	Dockerfile文件中包含的指令用来告诉Docker如何构建镜像：
	每一条指令都会在镜像上创建一个新的层，每一条指令的前缀都必须是大写的
	第一条必须是FROM
	FROM，指定使用哪个镜像源
	RUN，告诉docker在镜像内执行什么命令
	...
====================================================================================================
容器：

1. 运行容器：docker run <REPOSITORY:TAG> /bin/echo "Hello world"
	/bin/echo "Hello world"：在启动的容器里执行的命令

1. 运行容器(交互式)：docker run -i -t <REPOSITORY:TAG> /bin/bash
	-i：交互式操作
	-t：终端
	/bin/bash：这里希望有个交互式 Shell，因此用的是 /bin/bash。此时我们已经进入该容器

1. 运行容器(后台模式)：docker run -d ubuntu:15.10 /bin/sh -c "while true; do echo hello world; sleep 1; done"

1. 运行容器(交互式后台模式)：docker run -itd [--name <自定义容器名>] REPOSITORY:TAG /bin/bash

2. 停止/启动/重启一个已停止的容器：docker stop <CONTAINER_ID/NAMES>; docker start <CONTAINER_ID/NAMES>; docker restart <CONTAINER_ID>

3. 删除容器(容器必须是停止状态)：docker rm -f <CONTAINER_ID/NAMES>。docker container prune：清理掉所有处于终止状态的容器

4. *查看运行的容器：docker ps [-a]
	CONTAINER ID: 容器 ID
	IMAGE: 		使用的镜像
	COMMAND: 	启动容器时运行的命令
	CREATED: 	容器的创建时间
	STATUS: 	容器状态
	PORTS: 		容器的端口信息和使用的连接类型（tcp\udp）
	NAMES: 		容器名称

5. *查看容器内的标准输出：docker logs [-f --tail number] <CONTAINER_ID/NAMES>

6. *查看容器内部运行的进程：docker top <CONTAINER_ID/NAMES>

7. *进入容器：docker exec(退出容器时，不会会导致容器停止)。docker attach(退出容器时，会导致容器停止)

8. *退出容器：exit命令，或者Ctrl+D
====================================================================================================
1. 容器与主机间的数据拷贝：
	docker cp <CONTAINER_ID:SRC_PATH> <DEST_PATH>
	docker cp <DEST_PATH> <CONTAINER_ID:SRC_PATH>

2. 数据卷：（https://www.cnblogs.com/lishanlei/p/9503596.html）
	创建数据卷并挂载到容器：
		在Dockerfile中配置：VOLUME <容器中file>
		docker run时指定：-v <容器中file>
	主机的目录/文件作为数据卷挂载到容器：
		docker run时指定：-v <主机中file>:<容器中file>
	容器间数据共享：
		docker run -it --volumes-from shanlei-nginx ubuntu /bin/bash

3. 通过xshell在本地win主机和远程linux主机间传输文件：
	安装lrzsz：yum install lrzsz
	下载至本地：sz <file>
	上传至远程：rz
====================================================================================================






