zookeeper

1. 节点:
节点是zookeeper中数据存储的基础结构，zk的数据模型就是基于好多个节点的树结构，但zk规定每个节点的引用规则是路径引用。
每个节点中包含访问权限、节点元数据、存储数据以及子节点引用等四部分。

2. 节点的类型:
持久节点（PERSISTENT）：节点创建后，就一直存在，直到有删除操作来主动清除这个节点
持久顺序节点（PERSISTENT_SEQUENTIAL）：保留持久节点的特性，额外的特性是，每个节点会为其第一层子节点维护一个顺序，记录每个子节点创建的先后顺序，ZK会自动为给定节点名加上一个数字后缀（自增的），作为新的节点名。
临时节点（EPHEMERAL）：和持久节点不同的是，临时节点的生命周期和客户端会话绑定，当然也可以主动删除。
临时顺序节点（EPHEMERAL_SEQUENTIAL）：保留临时节点的特性，额外的特性如持久顺序节点的额外特性。

3. 节点的操作：
节点的增删改查分别是creat\delete\setData\getData，exists判断节点是否存在，getChildren获取所有子节点的引用。

上面提到了节点的监听者，我们可以在对zk的节点进行查询操作时，设置当前线程是否监听所查询的节点。getData、getChildren、exists都属于对节点的查询操作，这些方法都有一个boolean类型的watch参数，用来设置是否监听该节点。一旦某个线程监听了某个节点，那么这个节点发生的creat（在该节点下新建子节点）、setData、delete（删除节点本身或是删除其某个子节点）都会触发zk去通知监听该节点的线程。但需要注意的是，线程对节点设置的监听是一次性的，也就是说zk通知监听线程后需要改线程再次设置监听节点，否则该节点再次的修改zk不会再次通知。

zookeeper具备了实现分布式锁的基础条件：多进程共享、可以存储锁信息、有主动通知的机制