一、概念
排序二叉树：是二叉树，而且是有序的二叉树，但它没有重复元素。什么顺序呢?对每个节点而言∶
·如果左子树不为空，则左子树上的所有节点都小于该节点;
·如果右子树不为空，则右子树上的所有节点都大于该节点。

1. 高效查找
    1）首先与根节点比较，如果相同，就找到了;
    2）如果小于根节点，则到左子树中递归查找;
    3）如果大于根节点，则到右子树中递归查找。

2. 按序遍历
  递归式：
    1）访问左子树
    2）访问当前节点
    3）访问右子树
  非递归式：
    1）找第一个节点：最左边的节点
    2）依次找后继节点：
        ·如果该节点有右孩子，则后继节点为右子树中最小的节点；
        ·如果该节点没有右孩子，则后继节点为父节点或某个祖先节点，从当前节点往上找，如果它是父节点的右孩子，则继续找父节点，直到它不是右孩子或父节点为空，第一个非右孩子节点的父节点就是后继节点，如果找不到这样的祖先节点，则后继为空，遍历结束。

3. 插入
    1）找插入位置，即新节点的父节点，与查找元素类似，从根节点开始往下找，其步骤为∶将待插入节点与当前节点比较
        ·如果相同，表示已经存在了，不能再插入;
        ·如果小于当前节点，则到左子树中寻找，如果左子树为空，则当前节点即为要找的父节点;
        ·如果大于当前节点，则到右子树中寻找，如果右子树为空，则当前节点即为要找的父节点。
    2）找到父节点后，即可插入，如果插入元素小于父节点，则作为左孩子插入，否则作为右孩子插入。

4. 删除
    删除一个节点，有三种情况∶
    1)节点为叶子节点;
    2)节点只有一个孩子节点;
    3)节点有两个孩子节点。
    ·如果节点为叶子节点，则很简单，可以直接删掉，修改父节点的对应孩子节点为空即可。
    ·如果节点只有一个孩子节点，则替换待删节点为孩子节点，或者说，在孩子节点和父节点之间直接建立链接。
    ·如果节点有两个孩子节点，则首先找该节点的后继节点，找到后继节点后，替换待删节点为后继节点的内容，然后再删除后继节点。后继节点没有左孩子，这就将两个孩子节点的情况转换为了叶子节点或只有一个孩子节点的情况。